Selenium is open src tool for automating testing of web application across different platform and browser in different language. 
Selenium suite contain multiple tools like : 
	Selenium IDE	Selenium RC(Depereciated)	Selenium Webdriver		Selenium Grid
	
	
Selenium IDE : It is a Chrome and firefox plugin that we can install in our browser and perform test. Easy to use and used as prototyping tool not for advance script and testing.
Selenium RC : It is the first automated web testing tool that allow user to use any programming language to write testcase in order to automate UI tests for web apps against any HTTP website. It contain two parts :
	 1) Client library for the prefered language
	 2) Server that launch and kill Browser automatically(One need to install and launch a seperate application called Selenium Remote control Server before runing test scripts which act as a mediator between the browser and Selenium commands)
	 
	 --> How Selenium RC works behind the scenes : RC server injects a JS program known as Selenium core in browser. Once Selenium Core intected, it started recieving instructions from RC server based on test script. Selenium core executed all the instrution in JS commands. The web browser executes all the commands giver by selenium Core and returns the test summary back to the server.
	 
Selenium Webdriver : Selenium Web driver is better then IDE and RC as it control browser dirctly from OS level and doesn't required any proxy server. It required IDE for test script and web browser for run script.

Selenium Grid : It is used together with Selenium RC to run parallel tests accross different machines and different browser all at the same time using hub node concepts.



Selenium Project setup using Jar files: 
	Download Java JDK(Make sure to add JAVA_HOME variable & path in your Environment variable in your system), Eclipse IDE and Selenium Jar file.
	Create new Java Project in IDE and add Selenium Jar file in your projects build path-->Libraries
	
Selenium Project setup using build tool like maven:
	Create a maven project and add required dependencies in your pom.xml file.
	
Selenium provides us testrunners to better organize and execute testcases
	For java we have : Junit and TestNG
	For javascript we have : Jest and mocha
	For python we have : pytesy and unittest
	
	
Waits in Selenium : 1)Implicit Wait		2)Explicit Wait		3) Fluent Wait

	1) Implicit Wait : Implicit waits are global wait that applies on all the element location for the entire session, therefor using this wait is not recommanded. It can be set either with the timeouts capability in browser option or with driver methods
			Example with driver method----------> driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
			Example with timeouts capability in browser options ------------->
					ChromeOptions chromeOptions = getDefaultChromeOptions();
					Duration duration = Duration.of(5, ChronoUnit.SECONDS);
					chromeOptions.setImplicitWaitTimeout(duration);
					
	2) Explicit Wait : Explicit waits are wait applied on specific element looking for specific condition to be met, if condition not met give timeout error. Recommanded to use Explicit wait.
			Example ------------->
					Wait<WebDriver> explicitWait = new WebDriverWait(driver, Duration.ofSeconds(2));
					wait.until(d->submitButton.isDisplayed());
					
	3) Fluent Wait : Fluent wait is like coustomized wait. The Wait class can be instantiated with various parameters that will change how the conditions are evaluated.
		This can include:
			Changing how often the code is evaluated (polling interval)
			Specifying which exceptions should be handled automatically
			Changing the total timeout length
			Customizing the timeout message
		
		Example------->
			Wait<WebDriver> wait = new FluentWait<>(driver).withTimeout(Duration.ofSeconds(2)).pollingEvery(Duration.ofMillis(300))
			.ignoring(ElementNotInteractableException.class);

		    wait.until(d -> {
		          revealed.sendKeys("Displayed");
		          return true;
		        });
	

	
	
	
Driver Sessions is used to start and stop a session for opening and closing a browser. The Session is created automatically by initializing a new Driver class object. Each Langauge allow a session to be created with argument from one of the below mentioned classes.
	Options 
	HTTP Client configurations
	Listeners
	
Browser Options are shared by all the browsers. In selenum 3 we were using DesiredCapability classes but from selenium4 we have to use browser options classes. For remote driver sessions, a browser options instance is required as it determined which browser will be used.

	Example ----------->
			ChromeOptions chromeoption = getDefaultChromeOptions();
			String name = chromeoption.getBrowserName();
			chromeoption.setBrowserVersion("latest");
			chromeoption.setPlatformName("OS X 10.6");
			chromeoption.setAcceptInsecureCerts(true);
			chromeoption.setScriptTimeout(Duration.of(5, ChronoUnit.SECONDS));
			chromeoption.setPageLoadTimeout(Duration.of(5, ChronoUnit.SECONDS));
			chromeoption.setImplicitWaitTimeout(Duration.of(5, ChronoUnit.SECONDS));
			chromeoption.setPageLoadStrategy(PageLoadStrategy.NORMAL);		// NORMAL--> Used by default,wait for all resourse to load; EAGER--->DOM access is ready, but other resources may still loading;   NONE---> Doesn't block webdriver at all

